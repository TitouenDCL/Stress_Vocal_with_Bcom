I - Mode d'emploi de l'algorithme
II - Description des différents fichiers du projet

##############################
I - Mode d'emploi de l'algorithme
##############################
Requirements :
Anaconda (Python 3.8)

1 - Dépot des documents
Les fichiers techniques sont déposés dans ce Git (https://github.com/TitouenDCL/Stress_Vocal_with_Bcom), et les documents pratiques (livrables, présentations) sont sur le google drive dédié au projet (https://drive.google.com/drive/folders/1fGIEULFbw8XsNXGfG1t5fh2XTAvAYqpE?usp=sharing).
2 - Installation
Pour commencer, il faut cloner le git sur l'ordinateur adéquat.
Le fichier principal du projet, celui à lancer, est main.py.
Nous avons crée un environnement virtuel anaconda, qui contient donc les librairies nécessaires au bon fonctionnement et la version de python adéquate.
Afin d'utiliser l'environnement virtuel, il faut lancer Anaconda Navigator, puis changer l'environnement virtuel (par défaut root (base)) :
Il faut donc cliquer sur Environments dans le menu à gauche du navigateur Anaconda, puis cliquer sur "import". Ensuite, chercher le fichier à la raçine du git stressVocalEnv.yml, le sélectionner et le lancer.
Ensuite, il est possible d'exécuter le fichier main.py avec la méthode que vous préférez (en ligne de commande, ou avec spyder par exemple). Si le noyau a été lancé avant de changer d'environnement, il est nécessaire de relancer le kernel.


##############################
II - Description des differents fichiers du projet
##############################
Codes python:
    -train_test :
        Code de la fonction train_test.data_split(Coef, 'path de la data_base stress', 'path de la data_base other', 'path de destination')
        la description de cette fonction est faite dans le fichier
    -train_test_actor :
        Code de la fonction train_test_actor.data_split_actor(acteur, 'path de la data_base stress', 'path de la data_base other', 'path de destination')
        la description de cette fonction est faite dans le fichier

    -ModelCreation et ModelEvaluation sont des fichiers qui étaient utilisé pour créer et évaluer les modèle
        mais tout ce qui est écrit dedans est repris dans le notebook Test(1)(1)

    -Test(1)(1).ipynb:
        doit être ouvert avec jupyter notebook ( en lançant la commande 'jupyter notebook' dans
        le terminal du projet, il récapitule tout le processus experimental
        d'évaluation des modèles.

    -AudioListener.py :
        un copier coller de la documentation de la bibliothèque PyAudio qui défini la fonction
            record(output, RECORD_SECONDS)
        output: est le path ou sera écrit l'extrait audio,
        RECORD_SECONDS: le temps d'enregistrement,
        D'autres éléments sont modifiables directement dans la fonction

    -Data_base_array.py:
        C'est une tentative de mise sous forme de array les features d'un dossier
        d'enregistrements audios

    -main.py :
        fichier à lancer pour tester l'enregistrement en direct et l'évaluation de notre
        voix par le modèle choisi


    Dossiers :
        - Database:
            -Fearfull: Regroupe des audios de personnes dans une emotion "fearfull"
                        venants de la BD RAVDES et d'autres videos
            -Neutral: Regroupe des audios de personnes dans une emotion "neutral"
                        venants de la BD RAVDES et d'autres videos

            -Other: Plusieurs audios regroupés de la BD RAVDES (emotions "neutral", "calm", "disgust","sad"
            -Stress: Plusieurs audios regroupés de la BD RAVDES ( emotions "fearfull", "angry")

                    C'est avec Other et Stress que nous avons fait nos tests

            -Random_Train_Test_XXXXX: sont des séparation fait avec les fonctions data.split
                                       et data.split.actor à partir des dossiers Other et Stress
                                     Ils ont été crées pour la création de differents modèles
                                     et differents tests.
